{"version":3,"sources":["Controls/Validators/Validators.js","Components/Cart/Cart.module.sass","Components/Cart/CartCheckoutItem/CartCheckoutItem.module.sass","Components/Cart/CartCheckoutItem/CartCheckoutItem.js","Components/Cart/CartOrderForm/index.js","Components/Cart/CartReduxForm.js","Components/Cart/Cart.js"],"names":["required","value","maxLengthCreator","maxLength","length","module","exports","connect","clearItem","addItem","removeItem","cartItem","name","imageUrl","price","quantity","className","s","imgStyle","style","backgroundImage","alt","arrow","onClick","title","placement","onConfirm","e","message","success","onCancel","error","okText","cancelText","removeButton","reduxForm","form","handleSubmit","cart","totalPrice","userAddress","history","useHistory","date","Date","format","count","discount","Math","round","official","bordered","size","cartItems","map","item","total","configArr","config","lastIndex","key","id","Item","label","idx","quantityItems","getHours","getMinutes","getSeconds","push","onSubmit","createField","CustomInput","button","marginBottom","state","menu","userAdress","setUserAddress","reduce","amount","useState","visible","setVisible","data-field","orderWrapper","CartReduxForm","formData","closable","onClose","height"],"mappings":"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","file":"static/js/7.ca46b719.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const required = value => {\r\n    if (value) return undefined;\r\n\r\n    return <span>{\"Required!\"}</span>;\r\n};\r\n\r\n\r\nexport const maxLengthCreator = maxLength => value => {\r\n    if (value.length > maxLength) return <span>{`Max length is ${maxLength} symbols`}</span>;;\r\n\r\n    return undefined;\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"orderWrapper\":\"Cart_orderWrapper__1uqFP\",\"total\":\"Cart_total__2Fy4B\",\"button\":\"Cart_button__1C_7I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imgStyle\":\"CartCheckoutItem_imgStyle__1XsWv\",\"quantity\":\"CartCheckoutItem_quantity__ppNeb\",\"arrow\":\"CartCheckoutItem_arrow__1DTv3\",\"value\":\"CartCheckoutItem_value__3cEM1\",\"removeButton\":\"CartCheckoutItem_removeButton__1fRWY\"};","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {clearItem, removeItem, addItem} from '../../../redux/cart-reducer'\r\nimport s from './CartCheckoutItem.module.sass'\r\nimport {Popconfirm, message} from \"antd\";\r\n\r\n\r\nconst CartCheckoutItem = ({cartItem, clearItem, addItem, removeItem}) => {\r\n    const {name, imageUrl, price, quantity} = cartItem;\r\n    let q = 1\r\n\r\n    const confirm = e => {\r\n        message.success('Click on Yes')\r\n    }\r\n\r\n    const cancel = e => {\r\n        message.error('Click on No')\r\n    }\r\n\r\n    return <>\r\n        <tr>\r\n            <td>\r\n                <div className={s.imgStyle} style={{backgroundImage: `url(${imageUrl})`}} alt='item'/>\r\n            </td>\r\n            <td>\r\n                <span className={s.name}>{name}</span>\r\n            </td>\r\n            <td>\r\n                <span className={s.quantity}>\r\n                            <div className={s.arrow} onClick={() => removeItem(cartItem, q)}>\r\n                                &#10094;\r\n                            </div>\r\n                                    <span className={s.value}>{quantity}</span>\r\n                            <div className={s.arrow} onClick={() => addItem(cartItem, q)}>\r\n                                        &#10095;\r\n                            </div>\r\n                </span>\r\n            </td>\r\n            <td>\r\n                <span className={s.price}>${price}</span>\r\n            </td>\r\n            <td>\r\n                <Popconfirm\r\n                    title=\"Are you sure delete this product?\"\r\n                    placement=\"top\"\r\n                    onConfirm={confirm}\r\n                    onCancel={cancel}\r\n                    okText=\"Yes\"\r\n                    cancelText=\"No\"\r\n                >\r\n                    <div className={s.removeButton} onClick={() => clearItem(cartItem, quantity)}>\r\n                        &#10005;\r\n                    </div>\r\n                </Popconfirm>\r\n            </td>\r\n        </tr>\r\n    </>\r\n};\r\n\r\n\r\nexport default connect(null, {clearItem, addItem, removeItem})(CartCheckoutItem)","import React, {Fragment} from 'react'\r\nimport {reduxForm} from \"redux-form\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport {Descriptions} from \"antd\"\r\nimport {Button} from \"react-materialize\"\r\n\r\nconst CartOrderForm = ({handleSubmit, cart, totalPrice, userAddress}) => {\r\n\r\n    const history = useHistory()\r\n\r\n    let date = new Date()\r\n    let format = (count) => {\r\n        if (count < 10) {\r\n            return `0${count}`\r\n        }\r\n        else {\r\n            return count\r\n        }\r\n    }\r\n    let formatTime = () => `${format(date.getHours())}:${format(date.getMinutes())}:${format(date.getSeconds())}`\r\n\r\n    let discount = Math.round(totalPrice * 20 / 100)\r\n    let official = totalPrice - discount\r\n\r\n    return <>\r\n        <Descriptions bordered title=\"Products\" size=\"small\">\r\n            {\r\n                cart.cartItems.map(item => {\r\n                    let total = item.price * item.quantity\r\n                    const configArr = [...item.config]\r\n                    let lastIndex = configArr.length - 1\r\n                    return <Fragment key={item.id}>\r\n                        <Descriptions.Item label=\"Product\"><b>{item.name}</b></Descriptions.Item>\r\n                        <Descriptions.Item label=\"Quantity\"><b>{item.quantity}</b></Descriptions.Item>\r\n                        <Descriptions.Item label=\"Amount\"><b>{`$${total}`}</b></Descriptions.Item>\r\n                        <Descriptions.Item label=\"Config Info\">\r\n                            {\r\n                                configArr.map((item, idx) => lastIndex === idx\r\n                                    ? <b key={idx}>{item}</b>\r\n                                    : <b key={idx}>{item} | </b>\r\n                                )\r\n                            }\r\n                        </Descriptions.Item>\r\n                        <td />\r\n                        <td />\r\n                    </Fragment>\r\n                })\r\n            }\r\n        </Descriptions>\r\n        <br/>\r\n        <br/>\r\n        <Descriptions title=\"Order\" size=\"middle\">\r\n            <Descriptions.Item label=\"Quantity\">{cart.quantityItems}</Descriptions.Item>\r\n            <Descriptions.Item label=\"Address\">{userAddress}</Descriptions.Item>\r\n            <Descriptions.Item label=\"time\">{formatTime()}</Descriptions.Item>\r\n            <Descriptions.Item label=\"Total price\">${totalPrice}.00</Descriptions.Item>\r\n            <Descriptions.Item label=\"Discount\">${discount}.00</Descriptions.Item>\r\n            <Descriptions.Item label=\"Official\">${official}.00</Descriptions.Item>\r\n        </Descriptions>\r\n        <Button className={\"btn orange\"} onClick={() => history.push('/cart/success')}>Pay</Button>\r\n    </>\r\n}\r\n\r\nexport default reduxForm({form: 'order'})(CartOrderForm)","import React from 'react'\r\nimport s from './Cart.module.sass'\r\nimport {Button} from \"react-materialize\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {createField, Input as CustomInput} from \"../../common/FormControls/FormControls\";\r\nimport {required} from \"../../Controls/Validators/Validators\";\r\n\r\n\r\nexport default reduxForm({form: 'orderContacts'})(({handleSubmit, userAddress}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField('','text','userAddress',CustomInput,[required],'addressOrder',null, 'Your address', userAddress)}\r\n            {createField('','tel','userPhone',CustomInput,[required],'phoneOrder',null, 'Your phone')}\r\n            <Button className={`red ${s.button}`} style={{marginBottom: '20px'}}>Order</Button>\r\n        </form>\r\n    )\r\n})","import React, {useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport s from './Cart.module.sass'\r\nimport CartCheckoutItem from './CartCheckoutItem/CartCheckoutItem'\r\nimport CartOrderForm from \"./CartOrderForm\";\r\nimport {Table} from \"react-materialize\";\r\nimport {Drawer} from 'antd'\r\nimport {setUserAddress} from \"../../redux/menu-reducer\";\r\nimport CartReduxForm from \"./CartReduxForm\";\r\n\r\n\r\nconst Cart = ({cart, userAddress, setUserAddress}) => {\r\n    const totalPrice = cart.cartItems.reduce((total, amount) => {\r\n        return amount.price * amount.quantity + total\r\n    }, 0)\r\n\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    let showDrawer = () => {\r\n        setVisible(true)\r\n    };\r\n\r\n    let onClose = () => {\r\n        setVisible(false)\r\n    };\r\n\r\n    const onSubmit = (formData) => {\r\n        if (formData) {\r\n            showDrawer()\r\n            setUserAddress(formData.userAddress)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Table>\r\n                <thead>\r\n                <tr>\r\n                    <th data-field=\"Product\">\r\n                        Product\r\n                    </th>\r\n                    <th data-field=\"Description\">\r\n                        Description\r\n                    </th>\r\n                    <th data-field=\"Quantity\">\r\n                        Quantity\r\n                    </th>\r\n                    <th data-field=\"Price\">\r\n                        Price\r\n                    </th>\r\n                    <th data-field=\"Remove\">\r\n                        Remove\r\n                    </th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {\r\n                    cart.cartItems.map(cartItem => <CartCheckoutItem key={cartItem.id} cartItem={cartItem}/>)\r\n                }\r\n                </tbody>\r\n            </Table>\r\n            <div className={s.orderWrapper}>\r\n                <div className={s.total}>\r\n                    Total: {totalPrice}$\r\n                </div>\r\n            </div>\r\n            {\r\n                cart.cartItems.length\r\n                    ? <CartReduxForm onSubmit={onSubmit}/>\r\n                    : null\r\n            }\r\n            <Drawer\r\n                placement=\"bottom\"\r\n                closable={true}\r\n                onClose={onClose}\r\n                visible={visible}\r\n                height={600}\r\n            >\r\n                <CartOrderForm cart={cart} totalPrice={totalPrice} userAddress={userAddress}/>\r\n            </Drawer>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    cart: state.cart,\r\n    userAddress: state.menu.userAdress\r\n})\r\n\r\nexport default connect(mapStateToProps, {setUserAddress})(Cart)"],"sourceRoot":""}