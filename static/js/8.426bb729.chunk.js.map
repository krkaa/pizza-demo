{"version":3,"sources":["Components/Menu/Collection/CollectionPreview.module.sass","Components/Menu/MenuContent.module.sass","Components/Menu/MenuHead.jsx","Components/Menu/Collection/CollectionPreview.js","Components/Menu/MenuContent.jsx"],"names":["module","exports","MenuHead","displayName","currentUser","style","marginTop","Meta","Card","compose","withWindowSizeListener","connect","addItem","item","windowSize","name","id","price","imageUrl","windowWidth","useState","spanRow","setSpanRow","cardWidth","setCardWidth","imgHeight","setImgHeight","configArr","config","lastIndex","length","content","map","idx","key","useEffect","className","span","margin","s","card","width","hoverable","cover","title","height","alt","src","actions","node","marginRight","backgroundColor","waves","onClick","message","success","description","Content","Layout","Sider","state","menuData","menu","quantityItems","cart","useContext","AuthContext","setDisplayName","contentId","setContentId","setWidth","padding","sider","defaultSelectedKeys","defaultOpenKeys","mode","theme","Item","PieChartOutlined","gutter","xs","sm","md","lg","items","CollectionPreview"],"mappings":"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","file":"static/js/8.426bb729.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"CollectionPreview_card__3ynnc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sider\":\"MenuContent_sider__2OyrV\"};","import React from 'react';\r\n\r\nconst MenuHead = ({displayName, currentUser}) => {\r\n\r\n    return <div style={{marginTop: '10px'}}>\r\n        {\r\n            currentUser\r\n                ? <p>{`Вы авторизованы как`} <b>{displayName}</b></p>\r\n                : <p><b>{`Здарвствуйте, ${displayName}!`}</b></p>\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default MenuHead","import React, {useEffect, useState} from 'react'\r\nimport s from './CollectionPreview.module.sass'\r\nimport {addItem} from '../../../redux/cart-reducer'\r\nimport {connect} from 'react-redux'\r\nimport {Button} from \"react-materialize\";\r\nimport {Card, Col, Popover} from \"antd\";\r\nimport {message} from 'antd';\r\nimport {compose} from \"redux\";\r\nimport {withWindowSizeListener} from \"react-window-size-listener\";\r\n\r\nconst {Meta} = Card\r\n\r\nconst CollectionItem = ({item, addItem, windowSize, id}) => {\r\n    const {name, price, imageUrl} = item\r\n    const {windowWidth} = windowSize\r\n\r\n    const [spanRow, setSpanRow] = useState(8)\r\n    const [cardWidth, setCardWidth] = useState(200)\r\n    const [imgHeight, setImgHeight] = useState(200)\r\n\r\n    const onClickEvent = () => {\r\n        let q = 1\r\n        addItem(item, q)\r\n        message.success('Product add to cart!');\r\n    }\r\n\r\n    const configArr = [...item.config]\r\n    let lastIndex = configArr.length - 1\r\n    const content = (\r\n        <div>\r\n            {\r\n                configArr.map((item, idx) => lastIndex === idx\r\n                    ? <b key={idx}>{item}</b>\r\n                    : <b key={idx}>{item} | </b>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (windowWidth < 600) {\r\n            setSpanRow(24)\r\n            setCardWidth(155)\r\n            setImgHeight(155)\r\n        } else if (windowWidth > 600 && windowWidth < 768) {\r\n            setSpanRow(12)\r\n            setCardWidth(155)\r\n            setImgHeight(155)\r\n        } else if (windowWidth > 768 && windowWidth < 992) {\r\n            setSpanRow(8)\r\n            setCardWidth(155)\r\n            setImgHeight(155)\r\n        } else if (windowWidth > 992 && windowWidth < 1200) {\r\n            setSpanRow(8)\r\n            setCardWidth(200)\r\n            setImgHeight(200)\r\n        } else if (windowWidth > 1200 && windowWidth < 1449) {\r\n            setSpanRow(6)\r\n            setCardWidth(200)\r\n            setImgHeight(200)\r\n        } else if (windowWidth > 1449 && windowWidth < 1920) {\r\n            setSpanRow(6)\r\n            setCardWidth(260)\r\n            setImgHeight(260)\r\n        } else if (windowWidth > 1920) {\r\n            setSpanRow(6)\r\n            setCardWidth(350)\r\n            setImgHeight(350)\r\n        }\r\n    }, [windowWidth])\r\n\r\n    return (\r\n        <Col className=\"gutter-row\" span={spanRow} style={{margin: 'auto 0'}}>\r\n            <Card\r\n                className={s.card}\r\n                style={{width: cardWidth}}\r\n                hoverable\r\n                cover={\r\n                    <Popover content={content} title=\"Config\">\r\n                        <img\r\n                            style={{height: `${imgHeight}px`}}\r\n                            alt={name}\r\n                            src={imageUrl}\r\n                        />\r\n                    </Popover>\r\n                }\r\n                actions={[\r\n                    <Button\r\n                        node=\"button\"\r\n                        style={{\r\n                            marginRight: '5px',\r\n                            backgroundColor: '#FF9800'\r\n                        }}\r\n                        waves=\"light\"\r\n                        onClick={onClickEvent}\r\n                        key={item.id}\r\n                    >\r\n                        Add to cart\r\n                    </Button>\r\n                ]}\r\n            >\r\n                <Meta\r\n                    title={name}\r\n                    description={`${price}$`}\r\n                />\r\n            </Card>\r\n        </Col>\r\n    )\r\n}\r\n\r\n\r\nexport default compose(\r\n    withWindowSizeListener,\r\n    connect(null, {addItem})\r\n)(CollectionItem)","import React, {useContext, useEffect, useState} from 'react';\r\nimport {AuthContext} from \"../Auth/Auth\";\r\nimport {connect} from \"react-redux\";\r\nimport MenuHead from \"./MenuHead\";\r\nimport {Layout, Menu, Row} from \"antd\";\r\nimport {PieChartOutlined} from '@ant-design/icons'\r\nimport CollectionPreview from \"./Collection/CollectionPreview\";\r\nimport s from \"./MenuContent.module.sass\"\r\nimport {withWindowSizeListener} from \"react-window-size-listener\";\r\nimport {compose} from \"redux\";\r\n\r\nconst {Content, Sider} = Layout;\r\n\r\nconst MenuContent = ({menuData, quantityItems, windowSize}) => {\r\n\r\n    const {currentUser} = useContext(AuthContext)\r\n    const {windowWidth} = windowSize\r\n\r\n    const [displayName, setDisplayName] = useState('Гость')\r\n    const [contentId, setContentId] = useState(menuData[0].id)\r\n    const [width, setWidth] = useState(150)\r\n\r\n    useEffect(() => {\r\n        if (currentUser != null) {\r\n            setDisplayName(currentUser.displayName)\r\n        } else {\r\n            setDisplayName('Гость')\r\n        }\r\n    }, [currentUser])\r\n\r\n    useEffect(() => {\r\n        if (windowWidth < 600) {\r\n            setWidth(125)\r\n        }\r\n        else if (windowWidth > 600) {\r\n            setWidth(150)\r\n        }\r\n    }, [windowWidth])\r\n\r\n    return <>\r\n        <MenuHead displayName={displayName} currentUser={currentUser} quantityItems={quantityItems}/>\r\n        <Layout className=\"site-layout-background\" style={{padding: '10px 0', backgroundColor: '#fff'}}>\r\n            <Sider className={`site-layout-background ${s.sider}`} width={width}>\r\n                <Menu\r\n                    defaultSelectedKeys={['1']}\r\n                    defaultOpenKeys={['sub1']}\r\n                    mode=\"inline\"\r\n                    theme=\"light\"\r\n                >\r\n                    {\r\n                        menuData.map(item => (\r\n                            <Menu.Item key={item.id} onClick={() => setContentId(item.id)}>\r\n                                <PieChartOutlined style={{marginRight: 10}}/>\r\n                                <span>{item.title}</span>\r\n                            </Menu.Item>\r\n                        ))\r\n                    }\r\n                </Menu>\r\n            </Sider>\r\n            <Content style={{padding: '0 24px'}}>\r\n                <Row gutter={{xs: 8, sm: 16, md: 24, lg: 32}}>\r\n                        {\r\n                            menuData.map(item => {\r\n                                if (item.id === contentId) {\r\n                                    return item.items\r\n                                        .map((item) => (\r\n                                            <CollectionPreview\r\n                                                key={item.id}\r\n                                                name={item.name}\r\n                                                imageUrl={item.imageUrl}\r\n                                                price={item.price}\r\n                                                item={item}\r\n                                                id={item.id}\r\n                                            />\r\n                                        ))\r\n                                }\r\n                                return undefined\r\n                            })\r\n                        }\r\n                </Row>\r\n            </Content>\r\n        </Layout>\r\n    </>\r\n}\r\n\r\nlet mapStateToProps = state => ({\r\n    menuData: state.menu.menuData,\r\n    quantityItems: state.cart.quantityItems\r\n})\r\n\r\nexport default compose(\r\n    withWindowSizeListener,\r\n    connect(mapStateToProps, {})\r\n)(MenuContent)"],"sourceRoot":""}